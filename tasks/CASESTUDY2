import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.IsoFields;

import java.util.*;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class CaseStudy2 {

    public static void main(String[] args) {
        String inputPath = "/home/mphs/Desktop/Sample_Employee_WorkLogs.xlsx";

        List<EmployeeWorkLog> logs = ExcelReader.readExcelData(inputPath);

        if (logs.isEmpty()) {
            System.out.println("No data found in the input file.");
            return;
        }

        // Task 4: Average Weekly Hours by Employee per Month
        Map<String, Map<String, Double>> avgWeeklyHoursByEmpMonth = logs.stream()
                .collect(Collectors.groupingBy(
                        EmployeeWorkLog::getEmployeeId,
                        Collectors.groupingBy(
                                log -> log.getDate().getYear() + "-" + String.format("%02d", log.getDate().getMonthValue()),
                                Collectors.collectingAndThen(
                                        Collectors.toList(),
                                        monthlyLogs -> {
                                            double totalHours = monthlyLogs.stream()
                                                    .mapToDouble(EmployeeWorkLog::getHoursWorked)
                                                    .sum();

                                            long weekCount = monthlyLogs.stream()
                                                    .map(log -> log.getDate().get(IsoFields.WEEK_OF_WEEK_BASED_YEAR))
                                                    .distinct()
                                                    .count();

                                            return totalHours / (weekCount == 0 ? 1 : weekCount);
                                        }
                                )
                        )
                ));

        CSVExporter.exportAvgWeeklyHoursToCSV
    }}

 

public class CSVExporter {

    public static void exportAvgWeeklyHoursToCSV(Map<String, Map<String, Double>> avgWeeklyHours, List<EmployeeWorkLog> logs, String outputFile) {
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.append("Employee ID,Name,Month,Average Weekly Hours\n");

            for (var empEntry : avgWeeklyHours.entrySet()) {
                String empId = empEntry.getKey();
                String name = logs.stream()
                        .filter(log -> log.getEmployeeId().equals(empId))
                        .map(EmployeeWorkLog::getName)
                        .findFirst()
                        .orElse("Unknown");

                for (var monthEntry : empEntry.getValue().entrySet()) {
                    writer.append(String.format("%s,%s,%s,%.2f\n", empId, name, monthEntry.getKey(), monthEntry.getValue()));
                }
            }
            System.out.println("Average weekly hours exported to " + outputFile);
        } catch (IOException e) {
            System.err.println("Failed to write average weekly hours CSV: " + e.getMessage());
        }
    }

    public static void exportTop5EmployeesToCSV(List<Map.Entry<String, Double>> top5Employees, List<EmployeeWorkLog> logs, String outputFile) {
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.append("Employee ID,Name,Total Hours (Last 60 Days)\n");

            for (var entry : top5Employees) {
                String empId = entry.getKey();
                double hours = entry.getValue();
                String name = logs.stream()
                        .filter(log -> log.getEmployeeId().equals(empId))
                        .map(EmployeeWorkLog::getName)
                        .findFirst()
                        .orElse("Unknown");

                writer.append(String.format("%s,%s,%.2f\n", empId, name, hours));
            }
            System.out.println("Top 5 employees exported to " + outputFile);
        } catch (IOException e) {
            System.err.println("Failed to write top 5 employees CSV: " + e.getMessage());
        }
    }

    public static void exportEmployeesWithZeroDaysToCSV(List<String> employeesWithZeroDays, List<EmployeeWorkLog> logs, String outputFile) {
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.append("Employee ID,Name\n");
            for (String empId : employeesWithZeroDays) {
                String name = logs.stream()
                        .filter(log -> log.getEmployeeId().equals(empId))
                        .map(EmployeeWorkLog::getName)
                        .findFirst()
                        .orElse("Unknown");
                writer.append(String.format("%s,%s\n", empId, name));
            }
            System.out.println("Employees with consecutive zero-hour days exported to " + outputFile);
        } catch (IOException e) {
            System.err.println("Failed to write zero-hour employees CSV: " + e.getMessage());
        }
    }

    public static void exportWeekendHoursToCSV(Map<String, Double> weekendHours, List<EmployeeWorkLog> logs, String outputFile) {
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.append("Employee ID,Name,Weekend Hours\n");
            for (var entry : weekendHours.entrySet()) {
                String empId = entry.getKey();
                double hours = entry.getValue();
                String name = logs.stream()
                        .filter(log -> log.getEmployeeId().equals(empId))
                        .map(EmployeeWorkLog::getName)
                        .findFirst()
                        .orElse("Unknown");
                writer.append(String.format("%s,%s,%.2f\n", empId, name, hours));
            }
            System.out.println("Weekend hours exported to " + outputFile);
        } catch (IOException e) {
            System.err.println("Failed to write weekend hours CSV: " + e.getMessage());
        }
    }

    public static void exportLowHourDaysToCSV(Map<String, Map<LocalDate, Double>> lowHourDays, List<EmployeeWorkLog> logs, String outputFile) {
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.append("Employee ID,Name,Date,Total Hours\n");
            for (var empEntry : lowHourDays.entrySet()) {
                String empId = empEntry.getKey();
                String name = logs.stream()
                        .filter(log -> log.getEmployeeId().equals(empId))
                        .map(EmployeeWorkLog::getName)
                        .findFirst()
                        .orElse("Unknown");

                for (var dateEntry : empEntry.getValue().entrySet()) {
                    writer.append(String.format("%s,%s,%s,%.2f\n",
                            empId, name, dateEntry.getKey(), dateEntry.getValue()));
                }
            }
            System.out.println("Low hour days exported to " + outputFile);
        } catch (IOException e) {
            System.err.println("Failed to write low hour days CSV: " + e.getMessage());
        }
    }
}

public class ExcelReader {

    public static List<EmployeeWorkLog> readExcelData(String filePath) {
        List<EmployeeWorkLog> logs = new ArrayList<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/d/yyyy");

        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            if (rowIterator.hasNext()) rowIterator.next(); // Skip header

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                try {
                    String employeeId = row.getCell(0).getStringCellValue();
                    String name = row.getCell(1).getStringCellValue();
                    String department = row.getCell(2).getStringCellValue();
                    String projectId = row.getCell(3).getStringCellValue();
                    LocalDate date = row.getCell(4).getCellType() == CellType.NUMERIC
                            ? row.getCell(4).getLocalDateTimeCellValue().toLocalDate()
                            : LocalDate.parse(row.getCell(4).getStringCellValue(), formatter);
                    String taskCategory = row.getCell(5).getStringCellValue();
                    double hoursWorked = row.getCell(6).getNumericCellValue();
                    String remarks = row.getCell(7) != null ? row.getCell(7).getStringCellValue() : "";

                    logs.add(new EmployeeWorkLog(employeeId, name, department, projectId, date, taskCategory, hoursWorked, remarks));
                } catch (Exception e) {
                    System.err.println("Skipping row due to error: " + e.getMessage());
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        return logs;
    }
}
public class EmployeeWorkLog {
    private String employeeId;
    private String name;
    private String department;
    private String projectId;
    private LocalDate date;
    private String taskCategory;
    private double hoursWorked;
    private String remarks;

    public EmployeeWorkLog(String employeeId, String name, String department, String projectId,
                           LocalDate date, String taskCategory, double hoursWorked, String remarks) {
        this.employeeId = employeeId;
        this.name = name;
        this.department = department;
        this.projectId = projectId;
        this.date = date;
        this.taskCategory = taskCategory;
        this.hoursWorked = hoursWorked;
        this.remarks = remarks;
    }

    public String getEmployeeId() {
        return employeeId;
    }

    public String getName() {
        return name;
    }

    public String getDepartment() {
        return department;
    }

    public String getProjectId() {
        return projectId;
    }

    public LocalDate getDate() {
        return date;
    }

    public String getTaskCategory() {
        return taskCategory;
    }

    public double getHoursWorked() {
        return hoursWorked;
    }

    public String getRemarks() {
        return remarks;
    }

    @Override
    public String toString() {
        return "Name : " + name + ", Id : " + employeeId + ", Dept : " + department;
    }
}

