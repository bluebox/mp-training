import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;

public class LinkedListChallenge1{
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        LinkedList<Place> places=new LinkedList<>();
        Place firstPlace=new Place("Machilipatnam",336);
        Place vijayawada=new Place("vijayawada",270);
        Place vizag=new Place("vizag",1500);
        Place amalaPuram=new Place("amalapuram",765);
        Place kerala=new Place("kerala",1700);
        Place tamilnadu=new Place("tamilnadu",1256);
        Place usa=new Place("usa",987);
        Place pakisthan=new Place("pakisthan",9864);
        Place bangladesh=new Place("bangaladesh",7568);


        addPlace(places,firstPlace);
        addPlace(places,vijayawada);
        addPlace(places,vizag);
        addPlace(places,amalaPuram);
        addPlace(places,kerala);
       addPlace(places,tamilnadu);
       addPlace(places,usa);
       addPlace(places,pakisthan);
       addPlace(places,bangladesh);
       System.out.println(places);
       System.out.println("---+++++++++++-----");
       for(var item:places){
           
           System.out.println(item.name+"----->"+item.distance);
       }
        boolean quit=true;
        System.out.println("""
            Available actions (selecr word or latter_:
            (F)orward
            (B)ackward
            (L)ist Places
            (M)enu
            (Q)uit
            """);
        while(quit){
            System.out.println("Enter a number:");
            String a=scanner.nextLine().toUpperCase().substring(0,1);
            switch(a){
                case "F":System.out.println("GOING FORWWARD");
                break;
                case "B":System.out.println("GOING BACKWORD");break;
                case "M":printMenu();break;
                case "L":System.out.println(places);break;
                case "Q":quit=false;break;
                default :System.out.println("enter a invalid inout!! try again !!!!1");
            }
        }
    } 
    public static void addPlace(LinkedList<Place> placesList,Place newPlace){
        if(placesList.contains(newPlace)){
            System.out.println(newPlace+"is already exits !!!");
            return;
        }
        for(Place i:placesList){
            if(i.name.equalsIgnoreCase(newPlace.name)){
                System.out.println(newPlace.name+"is already exits !!!");
            return;
            }
        }
        
        ListIterator<Place> iter= placesList.listIterator();
        if (placesList.size()==0){placesList.add(newPlace);
                return;}
        int i=0;
        while(iter.hasNext()){
            if (iter.next().distance>=newPlace.distance){
                placesList.add(i,newPlace);
                return;
            }
            i++;

        }
        placesList.add(newPlace);
        return;
    }

public static void printMenu(){
    System.out.println("""
            Available actions (selecr word or latter_:
            (F)orward
            (B)ackward
            (L)ist Places
            (M)enu
            (Q)uit
            """);
}

        



public static class Place{
    private String name;
    private int distance;
    public Place(String name,int distance){
        this.name=name;
        this.distance=distance;
    }
     public String getName() {
        return name;
    }

    public int getDistance() {
        return distance;
    }
    public String toString() {
            return name + " -> " + distance + "km";
        }
        
}
}
