import java.util.LinkedList;
import java.util.ListIterator;
public class Mobile{
public static void main(String[] args){
    MobilePhone my=new MobilePhone("PRASAD");
    my.addContact("VAMSI","123456");
    my.addContact("SWATHI","33435647");
    my.addContact("RAJU","5454926");
    my.addContact("LIKITHA","242563424");
    my.printContacts();
    System.out.println("____________________________________");
    Contact a=new Contact("SWATHI","33435647");
    System.out.println("checking the contact"+ "SWATHI"+"and "+"33435647 found "+ my.checkContact(a));
    System.out.println("new contact checking"+my.findContact(a));
    System.out.println("contact found at "+my.findContact("SWATHI"));
    Contact b=new Contact("SWATHI","0000000000");
    System.out.println("updated contact number:"+b.getPhoneNumber());
    my.updateContact(a,b);
    System.out.println("after updation");
    my.printContacts();
    my.removeContact(new Contact("VAMSI","123456"));
    System.out.println("after removing");
    my.printContacts();
    a=my.queryContact("VAMSI");
    System.out.println(a.getName()+"------->"+a.getPhoneNumber());
    


}












public static class MobilePhone{
    private String myNumber;
    private LinkedList<Contact> myContacts;

    public MobilePhone(String myNumber){
        this.myNumber=myNumber;
        myContacts=new LinkedList<>();
    }
    public void addContact(String name,String phoneNumber){
        Contact a=new Contact(name,phoneNumber); 
        myContacts.addLast(a);

    }


    public  boolean checkContact(Contact contact){
        for(Contact i:myContacts){
            
            if (i.equals(contact)){return false;}
        }
        return true;

    }
    public LinkedList<Contact> updateContact(Contact oldContact,Contact newContact){
        ListIterator<Contact> iter=myContacts.listIterator();
        while(iter.hasNext()){
        Contact current=iter.next();
        if(current.equals(oldContact)){
        iter.set(newContact);}}
        return myContacts;
            
        
    }
    public LinkedList<Contact>  removeContact(Contact contact){
        ListIterator<Contact> iter=myContacts.listIterator();
        while(iter.hasNext()){
        if(iter.next().equals(contact)){
        iter.remove();
        break;}}
        return myContacts;
    }
    public int findContact(Contact contact){
        ListIterator<Contact> iter=myContacts.listIterator();
        int index=0;
        while(iter.hasNext()){
            Contact current=iter.next();
            if (current.equals(contact)){
                System.out.println("yeeeeeeeeeeeeeeeeeees");
                return index;
                
            }
            System.out.println("index value:"+index);
            index++;
        }
        return -11231;
    }
    public int findContact(String contactName){
        ListIterator<Contact> iter=myContacts.listIterator();
        int index=0;
        while(iter.hasNext()){
            Contact current=iter.next();
            if (current.name.equals(contactName)){
                return index;
            }
            index++;
        }
        return -1;
        }

    public Contact queryContact(String contactName){
        ListIterator<Contact> iter=myContacts.listIterator();
        
        while(iter.hasNext()){
            Contact x=iter.next();
            if (x.name.equals(contactName)){
                return x;
            }
            
        }
        return null;
        }
    public void printContacts(){
        ListIterator<Contact> iter=myContacts.listIterator();
        while(iter.hasNext()){
            Contact a=iter.next();
            System.out.println(a.name+" -> "+a.phoneNumber);
        }
    }



}

public static class Contact{
    String name;
    String phoneNumber;
    public Contact(String name,String phoneNumber){
        this.name=name;
        this.phoneNumber=phoneNumber;
    }
public  String getName(){
        return name;
}
public  String getPhoneNumber(){
        return phoneNumber;
}
public static  Contact createContact(String personName,String personNumber){
    return new Contact(personName,personNumber);
}
}
}